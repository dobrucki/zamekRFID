/******************************************************************************
 *
 * Copyright:
 *    (C) 2000 - 2007 Embedded Artists AB
 *
 * Description:
 *    Main program for LPC2148 Education Board test program
 * TO JEST TEN
 *****************************************************************************/

#include "pre_emptive_os/api/osapi.h"
#include "pre_emptive_os/api/general.h"
#include <printf_P.h>
#include <ea_init.h>
#include <lpc2xxx.h>
#include <consol.h>
#include "spi.h"
#include "rfid.h"
#include "buttons.h"

#define PROC1_STACK_SIZE 1024
#define PROC2_STACK_SIZE 1024
#define INIT_STACK_SIZE  400

static  tU32 KEYPIN_1  = (1 << 20);
static  tU32 KEYPIN_2  = (1 << 21);
static  tU32 KEYPIN_3  = (1 << 22);
static  tU32 KEYPIN_4  = (1 << 23);

static tU8 proc1Stack[PROC1_STACK_SIZE];
static tU8 initStack[INIT_STACK_SIZE];
static tU8 pid1;

static void proc1(void* arg);
static void initProc(void* arg);

volatile tU32 msClock;
volatile tU8 killProc1 = FALSE;

tU8 buttonOpen[3];
tU8 serNum[5];

void udelay( unsigned int delayInUs )
{
  /*
   * setup timer #1 for delay
   */
  T1TCR = 0x02;          //stop and reset timer
  T1PR  = 0x00;          //set prescaler to zero (PR + 1)
  T1MR0 = (((long)delayInUs-1) * (long)CORE_FREQ/1000) / 1000;
  T1IR  = 0xff;          //reset all interrrupt flags
  T1MCR = 0x04;          //stop timer on match
  T1TCR = 0x01;          //start timer

  //wait until delay time has elapsed
  while (T1TCR & 0x01)
    ;
}

void mdelay( unsigned int delayInUs )
{
  /*
   * setup timer #1 for delay
   */
  T1TCR = 0x02;          //stop and reset timer
  T1PR  = 0x00;          //set prescaler to zero (PR + 1)
  T1MR0 = ((long)delayInUs-1) * (long)CORE_FREQ/1000;
  T1IR  = 0xff;          //reset all interrrupt flags
  T1MCR = 0x04;          //stop timer on match
  T1TCR = 0x01;          //start timer

  //wait until delay time has elapsed
  while (T1TCR & 0x01)
    ;
}

void openDoor(){
    udelay(50);
    pwmON();
    ledON();
    mdelay(5000);
    pwmOFF();
    ledOFF();
    udelay(50);
}


/*****************************************************************************
 *
 * Description:
 *    The first function to execute
 *
 ****************************************************************************/
int
main(void)
{
  tU8 error;
  tU8 pid;

  osInit();
  osCreateProcess(initProc, initStack, INIT_STACK_SIZE, &pid, 1, NULL, &error);
  osStartProcess(pid, &error);
  
  osStart();
  return 0;
}

static void proc1(void* arg) {

	initPWM(1000);
	SPI_Master_Init();
	initLED();
	initRFID();


	    for(;;){
	    	if(checkButton(KEYPIN_1)){
	    		buttonOpen[0] = 1;
	    		printf("1 guzik");
	    		osSleep(50);
	    	}
	    	if(buttonOpen[0] ){
	    		if(checkButton(KEYPIN_3)){
	    			buttonOpen[1] = 1;
	    			printf("2 guzik");
	    			osSleep(50);
	    			buttonOpen[0] = 0;
	    		}
	    		if(checkButton(KEYPIN_2) || checkButton(KEYPIN_1) || checkButton(KEYPIN_4)){
	    			buttonOpen[0] = 0;
	    			printf("zle 2");
	    		}
	    	}
	    	if(buttonOpen[1]){
	    		if(checkButton(KEYPIN_2)){
	    			buttonOpen[0] = 0;
	    			buttonOpen[1] = 0;
	    			printf("otwarte");
	    			osSleep(50);
	    		}
	    		if(checkButton(KEYPIN_1) || checkButton(KEYPIN_3) || checkButton(KEYPIN_4)){
	    			buttonOpen[0] = 0;
	    			buttonOpen[1] = 0;
	    			printf("zle 3");
	    		}
	    	}

	    	if(checkButton(KEYPIN_1)){
	    		IOCLR1  = 0x00010000;
	    	} else {
	    		IOSET1  = 0x00010000;
	    	}
	    	if(checkButton(KEYPIN_2)){
	    		IOCLR1  = 0x00020000;
	    	} else {
	    		IOSET1  = 0x00020000;
	    	}
	    	if(checkButton(KEYPIN_3)){
	    		IOCLR1  = 0x00040000;
	    	} else {
	    		IOSET1  = 0x00040000;
	    	}
	    	if(checkButton(KEYPIN_4)) {
	    		IOCLR1  = 0x00080000;
	    	} else {
	    		IOSET1  = 0x00080000;
	    	}


	        if (isCard()) {
	             printf("Karta wykryta\n");
	             if (readCardSerial()==1){
//                printf("Serial: %x:%x:%x:%x: \n", serNum[0], serNum[1], serNum[2], serNum[3]);
	            	 if(checkIfValidTag()){
                        openDoor();
	            		 printf("JEST OK ");
	            	 }
	            }
	        }
	    }

}

static void
initProc(void* arg)
{
  tU8 error;

  eaInit();   //initialize printf
  osCreateProcess(proc1, proc1Stack, PROC1_STACK_SIZE, &pid1, 3, NULL, &error);
  osStartProcess(pid1, &error);
  osDeleteProcess();
}

void
appTick(tU32 elapsedTime)
{
  msClock += elapsedTime;
}
