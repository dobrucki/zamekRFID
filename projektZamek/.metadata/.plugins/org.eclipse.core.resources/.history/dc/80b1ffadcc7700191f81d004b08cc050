/******************************************************************************
 *
 * Copyright:
 *    (C) 2006 Embedded Artists AB
 *
 * File:
 *    pca9532.c
 *
 * Description:
 *    Implements hardware specific routines
 *
 *****************************************************************************/

/******************************************************************************
 * Includes
 *****************************************************************************/
#include "../pre_emptive_os/api/osapi.h"
#include "../pre_emptive_os/api/general.h"
#include <lpc2xxx.h>
#include "lcd_hw.h"

/******************************************************************************
 * Typedefs and defines
 *****************************************************************************/


/*****************************************************************************
 * Global variables
 ****************************************************************************/

/*****************************************************************************
 * Local variables
 ****************************************************************************/

/*****************************************************************************
 * Local prototypes
 ****************************************************************************/


/*****************************************************************************
 *
 * Description:
 *    Send 9-bit data to LCD controller
 *
 ****************************************************************************/
void
sendToLCD(tU8 firstBit, tU8 data)
{
  //disable SPI
  IOCLR = LCD_CLK;
  PINSEL0 &= 0xffffc0ff;
  
  if (1 == firstBit)
    IOSET = LCD_MOSI;   //set MOSI
  else
    IOCLR = LCD_MOSI;   //reset MOSI
  
  //Set clock high
  IOSET = LCD_CLK;
  
  //Set clock low
  IOCLR = LCD_CLK;
  
  /*
   * Enable SPI again
   */
  //initialize SPI interface
  SPI_SPCCR = 0x08;
  SPI_SPCR  = 0x20;

  //connect SPI bus to IO-pins
  PINSEL0 |= 0x00001500;
  
  //send byte
  SPI_SPDR = data;
  while((SPI_SPSR & 0x80) == 0)
    ;
}

void SPI_Master_Init()
{
	PINSEL0 = PINSEL0 | 0x00001500; /* Select P0.4, P0.5, P0.6, P0.7 as SCK0, MISO0, MOSI0 and GPIO */
	SPI_SPCR = 0x0020; /* SPI Master mode, 8-bit data, SPI0 mode */
	SPI_SPCCR = 0x10; /* Even number, minimum value 8, pre scalar for SPI Clock */
}

void SPI_Master_Write(tU8 data)
{
	char flush;
	IOCLR = (1<<7);  /* SSEL = 0, enable SPI communication with slave */
	SPI_SPDR = data;  /* Load data to be written into the data register */
	while ( (SPI_SPSR & 0x80) == 0 )
		;  /* Wait till data transmission is completed */
	flush = SPI_SPDR;
	IOSET = (1<<7);  /* SSEL = 1, disable SPI communication with slave */
}

tU8 SPI_Master_Read()
{
	IOCLR = (1<<7);  /* SSEL = 0, enable SPI communication with slave */
	SPI_SPDR = 0xFF;  /* Transmit Flush byte */
	while ( (SPI_SPSR & 0x80) == 0 )
		;  /* Wait till data transmission is completed */
	IOSET = (1<<7);  /* SSEL = 1, disable SPI communication with slave */
	return SPI_SPDR;  /* Return the data received */
}
//
//void SPI_Master_Read(tU8* buffer)
//{
//	IOCLR = (1<<7);  /* SSEL = 0, enable SPI communication with slave */
//	SPI_SPDR = 0xFF;  /* Transmit Flush byte */
//	tU8 i = 0;
//	while ( (SPI_SPSR & 0x80) == 0 )
//		;  /* Wait till data transmission is completed */
//	IOSET = (1<<7);  /* SSEL = 1, disable SPI communication with slave */
//	return SPI_SPDR;  /* Return the data received */
//}


/*****************************************************************************
 *
 * Description:
 *    Initialize the SPI interface for the LCD controller
 *
 ****************************************************************************/
void
initSpiForLcd(void)
{
  //make SPI slave chip select an output and set signal high
  IODIR |= (LCD_CS | LCD_CLK | LCD_MOSI);

  //deselect controller
  selectLCD(FALSE);

  //connect SPI bus to IO-pins
  PINSEL0 |= 0x00001500;

  //initialize SPI interface
  SPI_SPCCR = 0x08;
  SPI_SPCR  = 0x20;
}

/*****************************************************************************
 *
 * Description:
 *    Select/deselect LCD controller (by controlling chip select signal)
 *
 ****************************************************************************/
void
selectLCD(tBool select)
{
  if (TRUE == select)
    IOCLR = LCD_CS;
  else
    IOSET = LCD_CS;
}
