//#include "rfid.h"


tU8 serNum[5];
tU8 AserNum[5];

/******************************************************************************
 * Definitions
 ******************************************************************************/
#define MAX_LEN 16   // Largo maximo de la matriz

//MF522 comando palabra
#define PCD_IDLE              0x00               // NO action; Y cancelar el comando
#define PCD_AUTHENT           0x0E               // autenticación de clave
#define PCD_RECEIVE           0x08               // recepción de datos
#define PCD_TRANSMIT          0x04               // Enviar datos
#define PCD_TRANSCEIVE        0x0C               // Enviar y recibir datos
#define PCD_RESETPHASE        0x0F               // reajustar
#define PCD_CALCCRC           0x03               // CRC calcular

//Mifare_One  Tarjeta Mifare_One comando palabra
#define PICC_REQIDL           0x26               // Área de la antena no está tratando de entrar en el estado de reposo
#define PICC_REQALL           0x52               // Todas las cartas para encontrar el área de la antena
#define PICC_ANTICOLL         0x93               // anti-colisión
#define PICC_SElECTTAG        0x93               // elección de tarjeta
#define PICC_AUTHENT1A        0x60               // verificación key A
#define PICC_AUTHENT1B        0x61               // verificación Key B
#define PICC_READ             0x30               // leer bloque
#define PICC_WRITE            0xA0               // Escribir en el bloque
#define PICC_DECREMENT        0xC0               // cargo
#define PICC_INCREMENT        0xC1               // recargar
#define PICC_RESTORE          0xC2               // Transferencia de datos de bloque de buffer
#define PICC_TRANSFER         0xB0               // Guardar los datos en el búfer
#define PICC_HALT             0x50               // inactividad

//MF522 Código de error de comunicación cuando regresó
#define MI_OK                 0
#define MI_NOTAGERR           1
#define MI_ERR                2

//------------------ MFRC522 registro---------------
//Page 0:Command and Status
#define     Reserved00            0x00
#define     CommandReg            0x01
#define     CommIEnReg            0x02
#define     DivlEnReg             0x03
#define     CommIrqReg            0x04
#define     DivIrqReg             0x05
#define     ErrorReg              0x06
#define     Status1Reg            0x07
#define     Status2Reg            0x08
#define     FIFODataReg           0x09
#define     FIFOLevelReg          0x0A
#define     WaterLevelReg         0x0B
#define     ControlReg            0x0C
#define     BitFramingReg         0x0D
#define     CollReg               0x0E
#define     Reserved01            0x0F
//Page 1:Command
#define     Reserved10            0x10
#define     ModeReg               0x11
#define     TxModeReg             0x12
#define     RxModeReg             0x13
#define     TxControlReg          0x14
#define     TxAutoReg             0x15
#define     TxSelReg              0x16
#define     RxSelReg              0x17
#define     RxThresholdReg        0x18
#define     DemodReg              0x19
#define     Reserved11            0x1A
#define     Reserved12            0x1B
#define     MifareReg             0x1C
#define     Reserved13            0x1D
#define     Reserved14            0x1E
#define     SerialSpeedReg        0x1F
//Page 2:CFG
#define     Reserved20            0x20
#define     CRCResultRegM         0x21
#define     CRCResultRegL         0x22
#define     Reserved21            0x23
#define     ModWidthReg           0x24
#define     Reserved22            0x25
#define     RFCfgReg              0x26
#define     GsNReg                0x27
#define     CWGsPReg             0x28
#define     ModGsPReg             0x29
#define     TModeReg              0x2A
#define     TPrescalerReg         0x2B
#define     TReloadRegH           0x2C
#define     TReloadRegL           0x2D
#define     TCounterValueRegH     0x2E
#define     TCounterValueRegL     0x2F
//Page 3:TestRegister
#define     Reserved30            0x30
#define     TestSel1Reg           0x31
#define     TestSel2Reg           0x32
#define     TestPinEnReg          0x33
#define     TestPinValueReg       0x34
#define     TestBusReg            0x35
#define     AutoTestReg           0x36
#define     VersionReg            0x37
#define     AnalogTestReg         0x38
#define     TestDAC1Reg           0x39
#define     TestDAC2Reg           0x3A
#define     TestADCReg            0x3B
#define     Reserved31            0x3C
#define     Reserved32            0x3D
#define     Reserved33            0x3E
#define     Reserved34            0x3F
//-----------------------------------------------



void writeMFRC522(unsigned char addr, unsigned char val);
unsigned char readMFRC522(unsigned char addr);
void reset();
void setBitMask(unsigned char reg, unsigned char mask);
void clearBitMask(unsigned char reg, unsigned char mask);
void antennaOn(void);
void calculateCRC(unsigned char *pIndata, unsigned char len, unsigned char *pOutData);
unsigned char MFRC522ToCard(unsigned char command, unsigned char *sendData, unsigned char sendLen, unsigned char *backData, unsigned int *backLen);
unsigned char  MFRC522Request(unsigned char reqMode, unsigned char *TagType);
unsigned char anticoll(unsigned char *serNum);
tU8 isCard();
tU8 readCardSerial();
unsigned char auth(unsigned char authMode, unsigned char BlockAddr, unsigned char *Sectorkey, unsigned char *serNum);
unsigned char read(unsigned char blockAddr, unsigned char *recvData);
unsigned char write(unsigned char blockAddr, unsigned char *writeData);
void halt();
void init();




void writeMFRC522(unsigned char addr, unsigned char val)
{
   IOCLR = (1<<7);  /* SSEL = 0, enable SPI communication with slave */
   SPI_Master_Write((addr<<1)&0x7E);   
   udelay(10);
   SPI_Master_Write(val); 
   IOSET = (1<<7);  /* SSEL = 1, disable SPI communication with slave */
}



unsigned char readMFRC522(unsigned char addr)
{
   unsigned char val;
   IOCLR = (1<<7);  /* SSEL = 0, enable SPI communication with slave */
   SPI_Master_Write(((addr<<1)&0x7E) | 0x80);   
   val = SPI_Master_Read(0x00);
   IOSET = (1<<7);  /* SSEL = 1, disable SPI communication with slave */
   return val;   
}

void reset()
{
   writeMFRC522(CommandReg, PCD_RESETPHASE);
}


void setBitMask(unsigned char reg, unsigned char mask)  
{ 
    unsigned char tmp;
    tmp = readMFRC522(reg);
    writeMFRC522(reg, tmp | mask);  // set bit mask
}

void clearBitMask(unsigned char reg, unsigned char mask)  
{
    unsigned char tmp;
    tmp = readMFRC522(reg);
    writeMFRC522(reg, tmp & (~mask));  // clear bit mask
} 

void antennaOn(void)
{
   unsigned char temp;

   temp = readMFRC522(TxControlReg);
   if (!(temp & 0x03))
   {
      setBitMask(TxControlReg, 0x03);
   }
}

void calculateCRC(unsigned char *pIndata, unsigned char len, unsigned char *pOutData)
{
    unsigned char i, n;

    clearBitMask(DivIrqReg, 0x04);
    setBitMask(FIFOLevelReg, 0x80);



    for (i=0; i<len; i++)
    {   
      writeMFRC522(FIFODataReg, *(pIndata+i));   
   }
    writeMFRC522(CommandReg, PCD_CALCCRC);


    i = 0xFF;
    do 
    {
        n = readMFRC522(DivIrqReg);
        i--;
    }
    while ((i!=0) && !(n&0x04));

    pOutData[0] = readMFRC522(CRCResultRegL);
    pOutData[1] = readMFRC522(CRCResultRegM);
}



unsigned char MFRC522ToCard(unsigned char command, unsigned char *sendData, unsigned char sendLen, unsigned char *backData, unsigned int *backLen)
{
    unsigned char status = MI_ERR;
    unsigned char irqEn = 0x00;
    unsigned char waitIRq = 0x00;
    unsigned char lastBits;
    unsigned char n;
    unsigned int i;

    switch (command)
    {
        case PCD_AUTHENT:
      {
         irqEn = 0x12;
         waitIRq = 0x10;
         break;
      }
      case PCD_TRANSCEIVE:
      {
         irqEn = 0x77;
         waitIRq = 0x30;
         break;
      }
      default:
         break;
    }

    writeMFRC522(CommIEnReg, irqEn|0x80);
    clearBitMask(CommIrqReg, 0x80);
    setBitMask(FIFOLevelReg, 0x80);

   writeMFRC522(CommandReg, PCD_IDLE);


    for (i=0; i<sendLen; i++)
    {   
      writeMFRC522(FIFODataReg, sendData[i]);    
    }


   writeMFRC522(CommandReg, command);
    if (command == PCD_TRANSCEIVE)
    {    
      setBitMask(BitFramingReg, 0x80);
   }   


   i = 2000;
    do 
    {

        n = readMFRC522(CommIrqReg);
        i--;
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));

    clearBitMask(BitFramingReg, 0x80);

    if (i != 0)
    {    
        if(!(readMFRC522(ErrorReg) & 0x1B))
        {
            status = MI_OK;
            if (n & irqEn & 0x01)
            {   
            status = MI_NOTAGERR;
         }

            if (command == PCD_TRANSCEIVE)
            {
                  n = readMFRC522(FIFOLevelReg);
                 lastBits = readMFRC522(ControlReg) & 0x07;
                if (lastBits)
                {   
               *backLen = (n-1)*8 + lastBits;   
            }
                else
                {   
               *backLen = n*8;   
            }

                if (n == 0)
                {   
               n = 1;    
            }
                if (n > MAX_LEN)
                {   
               n = MAX_LEN;   
            }


                for (i=0; i<n; i++)
                {   
               backData[i] = readMFRC522(FIFODataReg);    
            }
            }
        }
        else
        {   
         status = MI_ERR;  
      }

    }



    return status;
}

unsigned char  MFRC522Request(unsigned char reqMode, unsigned char *TagType)
{
   unsigned char status;  
   unsigned int backBits;         //   Recibió bits de datos

   writeMFRC522(BitFramingReg, 0x07);      //TxLastBists = BitFramingReg[2..0]   ???

   TagType[0] = reqMode;
   status = MFRC522ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);

   if ((status != MI_OK) || (backBits != 0x10))
   {    
      status = MI_ERR;
   }

   return status;
}


unsigned char anticoll(unsigned char *serNum)
{
    unsigned char status;
    unsigned char i;
   unsigned char serNumCheck=0;
    unsigned int unLen;

   writeMFRC522(BitFramingReg, 0x00);

    serNum[0] = PICC_ANTICOLL;
    serNum[1] = 0x20;
    status = MFRC522ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);

    if (status == MI_OK)
   {
      for (i=0; i<4; i++)
      {   
          serNumCheck ^= serNum[i];
      }
      if (serNumCheck != serNum[i])
      {   
         status = MI_ERR;    
      }
    }

    return status;
}



tU8 isCard()
 {
   unsigned char status;
   unsigned char str[MAX_LEN];

   status = MFRC522Request(PICC_REQIDL, str);   
    if (status == MI_OK) {
      return 1;
   } else { 
      return 0; 
   }
 }

 tU8 readCardSerial(){

   tU8 status;
   tU8 str[MAX_LEN];

   status = anticoll(str);
   static tU8 i;
   for (i = 0; i < 5; i++) {
	   *(serNum + i) = *(str + i);
   }

   if (status == MI_OK) {
      return 1;
   } else {
      return 0;
   }

 }

unsigned char auth(unsigned char authMode, unsigned char BlockAddr, unsigned char *Sectorkey, unsigned char *serNum)
{
    unsigned char status;
    unsigned int recvBits;
    unsigned char i;
   unsigned char buff[12]; 

    buff[0] = authMode;
    buff[1] = BlockAddr;
    for (i=0; i<6; i++)
    {    
      buff[i+2] = *(Sectorkey+i);   
   }
    for (i=0; i<4; i++)
    {    
      buff[i+8] = *(serNum+i);   
   }
    status = MFRC522ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);

    if ((status != MI_OK) || (!(readMFRC522(Status2Reg) & 0x08)))
    {   
      status = MI_ERR;   
   }

    return status;
}

unsigned char read(unsigned char blockAddr, unsigned char *recvData)
{
    unsigned char status;
    unsigned int unLen;

    recvData[0] = PICC_READ;
    recvData[1] = blockAddr;
    calculateCRC(recvData,2, &recvData[2]);
    status = MFRC522ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);

    if ((status != MI_OK) || (unLen != 0x90))
    {
        status = MI_ERR;
    }

    return status;
}


unsigned char write(unsigned char blockAddr, unsigned char *writeData)
{
    unsigned char status;
    unsigned int recvBits;
    unsigned char i;
   unsigned char buff[18]; 

    buff[0] = PICC_WRITE;
    buff[1] = blockAddr;
    calculateCRC(buff, 2, &buff[2]);
    status = MFRC522ToCard(PCD_TRANSCEIVE, buff, 4, buff, &recvBits);

    if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A))
    {   
      status = MI_ERR;   
   }

    if (status == MI_OK)
    {
        for (i=0; i<16; i++)
        {    
           buff[i] = *(writeData+i);   
        }
        calculateCRC(buff, 16, &buff[16]);
        status = MFRC522ToCard(PCD_TRANSCEIVE, buff, 18, buff, &recvBits);

      if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A))
        {   
         status = MI_ERR;   
      }
    }

    return status;
}


void halt()
{
    unsigned char status;
    unsigned int unLen;
    unsigned char buff[4];

    buff[0] = PICC_HALT;
    buff[1] = 0;
    calculateCRC(buff, 2, &buff[2]);

    clearBitMask(Status2Reg, 0x08); // turn off encryption

    status = MFRC522ToCard(PCD_TRANSCEIVE, buff, 4, buff,&unLen);
}




void init()
{

   reset();

    writeMFRC522(TModeReg, 0x8D);
    writeMFRC522(TPrescalerReg, 0x3E);
    writeMFRC522(TReloadRegL, 30);           
    writeMFRC522(TReloadRegH, 0);

   writeMFRC522(TxAutoReg, 0x40);
   writeMFRC522(ModeReg, 0x3D);



   antennaOn();
}

